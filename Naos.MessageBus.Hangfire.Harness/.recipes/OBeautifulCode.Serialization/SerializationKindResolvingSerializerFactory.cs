// --------------------------------------------------------------------------------------------------------------------
// <copyright file="SerializationKindResolvingSerializerFactory.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Serialization.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Serialization.Recipes
{
    using global::System;
    using OBeautifulCode.Serialization.Bson;
    using OBeautifulCode.Serialization.Json;
    using OBeautifulCode.Serialization.PropertyBag;
    using OBeautifulCode.Type;
    using static System.FormattableString;

    /// <summary>
    /// Builds a serializer to use based on the <see cref="SerializationKind"/> of the specified <see cref="SerializerRepresentation"/>.
    /// </summary>
#if !OBeautifulCodeSerializationSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Serialization.Recipes", "See package version number")]
    internal
#else
    public
#endif
    sealed class SerializationKindResolvingSerializerFactory : SerializerFactoryBase
    {
        private static readonly BsonSerializerFactory BsonSerializerFactory = new BsonSerializerFactory();

        private static readonly JsonSerializerFactory JsonSerializerFactory = new JsonSerializerFactory();

        private static readonly PropertyBagSerializerFactory PropertyBagSerializerFactory = new PropertyBagSerializerFactory();

        /// <inheritdoc />
        public override ISerializer BuildSerializer(
            SerializerRepresentation serializerRepresentation,
            VersionMatchStrategy assemblyVersionMatchStrategy = VersionMatchStrategy.AnySingleVersion)
        {
            if (serializerRepresentation == null)
            {
                throw new ArgumentNullException(nameof(serializerRepresentation));
            }

            ISerializer result;

            switch (serializerRepresentation.SerializationKind)
            {
                case SerializationKind.Bson:
                    result = BsonSerializerFactory.BuildSerializer(serializerRepresentation, assemblyVersionMatchStrategy);
                    break;
                case SerializationKind.Json:
                    result = JsonSerializerFactory.BuildSerializer(serializerRepresentation, assemblyVersionMatchStrategy);
                    break;
                case SerializationKind.PropertyBag:
                    result = PropertyBagSerializerFactory.BuildSerializer(serializerRepresentation, assemblyVersionMatchStrategy);
                    break;
                default:
                    throw new NotSupportedException(Invariant($"{nameof(serializerRepresentation)} from enumeration {nameof(SerializationKind)} of {serializerRepresentation.SerializationKind} is not supported."));
            }

            return result;
        }
    }
}
