// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TaskExtensions.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Execution.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Execution.Recipes
{
    using System.Threading;
    using global::System;
    using global::System.Diagnostics.CodeAnalysis;
    using global::System.Threading.Tasks;

    /// <summary>
    /// Extension methods on <see cref="Task"/>.
    /// </summary>
#if !OBeautifulCodeExecutionSolution
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Execution.Recipes", "See package version number")]
    internal
#else
    public
#endif
    static class TaskExtensions
    {
        /// <summary>
        /// Offloads asynchronous work to the thread pool via <see cref="Task.Run(Func{Task})"/>
        /// then blocks on the resulting task until complete,
        /// while ensuring that the asynchronous code resumes on the same thread
        /// by using a custom <see cref="SynchronizationContext"/> for the execution.
        /// </summary>
        /// <param name="func">A func that executes asynchronous work.</param>
        [SuppressMessage("Microsoft.Performance", "CA1820:TestForEmptyStringsUsingStringLength", Justification = "In this case we are specifically testing for empty string and not null.")]
        public static void ExecuteSynchronously(
            this Func<Task> func)
        {
            if (func == null)
            {
                throw new ArgumentNullException(nameof(func));
            }

            var task = Task.Run(() => AsyncContext.Run(func));

            task.GetAwaiter().GetResult();
        }

        /// <summary>
        /// Offloads asynchronous work to the thread pool via <see cref="Task.Run(Func{Task})"/>
        /// then blocks on the resulting task until complete,
        /// while ensuring that the asynchronous code resumes on the same thread
        /// by using a custom <see cref="SynchronizationContext"/> for the execution.
        /// </summary>
        /// <typeparam name="T">The type of the return value of the asynchronous work.</typeparam>
        /// <param name="func">A func that executes asynchronous work.</param>
        /// <returns>
        /// Return value of the asynchronous work.
        /// </returns>
        public static T ExecuteSynchronously<T>(
            this Func<Task<T>> func)
        {
            if (func == null)
            {
                throw new ArgumentNullException(nameof(func));
            }

            var task = Task.Run(() => AsyncContext.Run(func));

            T result = task.GetAwaiter().GetResult();

            return result;
        }
    }
}